"""
project: student registration and average calculations
register the student and enter the grades, calculate the averages
and check the student's situation
"""

# Student Registration and Average Calculation System

# List to store student data
students = []

def register_student():
"""Function to register a student and their grades."""
name = input("Enter the student's name: ").strip()
if not name:
print("Error: The student's name cannot be empty.")
return

# Collect the student's grades
grades = []
for i in range(1, 4): # Example: three grades
while True:
try:
grade = float(input(f"Enter the grade {i} of the student {name}: ").strip())
if 0 <= grade <= 10:
grades.append(grade)
break
else:
print("Error: The grade must be between 0 and 10.")
except ValueError:
print("Error: Enter a valid number.")

# Calculate the student's average
average = sum(grades) / len(grades)

# Determine the student's status
if average >= 7:
status = "Approved"
elif 5 <= average < 7:
status = "Recovery"
else:
status = "Failed"

# Store the student's data
students.append({"name": name, "grades": grades, "average": average, "situation": situation})
print(f"Student '{name}' successfully registered!")

def display_students():
"""Function to display registered students and their information."""
if not students:
print("No students registered.")
else:
print("\nStudent Registration:")
print("-" * 50)
for idx, student in enumerate(students, start=1):
name = student["name"]
grades = ", ".join(f"{grade:.2f}" for grade in student["grades"])
average = student["average"]
situation = student["situation"]
print(f"{idx}. Name: {name} | Grades: {grades} | Average: {average:.2f} | Situation: {situation}")
print("-" * 50)

def menu():
"""Function to display the menu and manage operations."""
while True:
print("\nMenu:")
print("1. Register Student")
print("2. Display Students")
print("3. Exit")

option = input("Choose an option: ").strip()
if option == "1":
register_student()
elif option == "2":
display_students()
elif option == "3":
print("Exiting the system...")
break
else:
print("Invalid option. Try again.")

# Run the system
menu()

#1st validate the student's name.
def validate_name():
while True:
name = input("Enter the student's first and last name student: ")
if len(name) >=5:
return name
else:
print("Invalid name")
#2° validate the grade
def validate_grades():
grades=[]#list to store the grades
#loop in for for 2 grades
for i in range(1,3):#example of 2 grades
while True:
grade=float(input(
f"Enter the grade:{i} between 0 and 10:"
))
if grade ==0 or grade <=10:#if to validate the grade from 0 to 10
grades.append(grade)#add the list of grades[]
break
else:
print("Invalid grade.")
return grades
#3° function to register students
def register_students():
students=[]#empty list to register students
while True:#registration loop
name=validate_name()#call the function
grades=validate_grades()#grades function
average=sum(grades)/len(grades)#calculate the average
status="approved" if average >=6 else "Failed" #approved or failed status
students.append((name,grades,average,situation))#add to the list
continue=input(
"Type 's' to exit or enter to continue.")
if continue.lower()=="s":
print("Closing the program")
break
return students
#4th function to display registered students
def display_students(students):
if not students:
print("No students registered")
else:
for student in students:
print(f"Name: {student[0]}")
print(f"Grades: {student[1]}")
print(f"Average: {student[2]}")
print(f"Situation: {student[3]}")
#5th main function
def main():
print("Student registration and average calculation.")
students=register_students()
display_students(students)
#close main
if __name__=="__main__":
main()
